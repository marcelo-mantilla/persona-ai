from langchain.agents import AgentExecutor, AgentType, initialize_agent
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from openai import OpenAI

from src.services.date_service import DateService
from src.services.service import Service
from src.avatar.models import Avatar
from src.utils.token_conversions import convert_char_count_to_tokens


TWITTER_TOKEN_LENGTH = round(280 / 4) - 5

class ActionService(Service):
    def __init__(self, avatar: Avatar):
        self.avatar = avatar
        self.date_as_prompt = DateService().date_as_prompt()
        self.client = OpenAI()

    def brainstorm_action(self) -> str:
        prompt_template = self._action_prompt_template()
        prompt = prompt_template.format(
            avatar_name=self.avatar.name,
            persona_template=self.avatar.persona_template.as_prompt(),
            date_and_time=self.date_as_prompt,
        )
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=400,
            temperature=0.8,
        )
        return response.choices[0].message.content

    def brainstorm_caption(self, action: str) -> str:
        prompt_template = self._caption_prompt_template()
        prompt = prompt_template.format(
            avatar_name=self.avatar.name,
            action=action,
            persona_template=self.avatar.persona_template.as_prompt(),
            caption_template=self.avatar.caption_template.as_prompt(),
        )
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=TWITTER_TOKEN_LENGTH,
            temperature=0.8,
        )
        return response.choices[0].message.content

    def brainstorm_status(self) -> str:
        prompt_template = self._status_prompt_template()
        prompt = prompt_template.format(
            avatar_name=self.avatar.name,
            persona_template=self.avatar.persona_template.as_prompt(),
            date_and_time=self.date_as_prompt,
        )
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=TWITTER_TOKEN_LENGTH,
            temperature=0.8
        )
        content = response.choices[0].message.content

        if len(content) > 280:
            content = self.retry_status_content(content)
        return content

    def retry_status_content(self, content: str) -> str:
        prompt_template = self._status_retry_prompt_template()
        prompt = prompt_template.format(
            avatar_name=self.avatar.name,
            persona_template=self.avatar.persona_template.as_prompt(),
            caption=content,
        )
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=TWITTER_TOKEN_LENGTH,
            temperature=0.8
        )

        new_status = response.choices[0].message.content
        retries = 0

        while len(new_status) > 280:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=TWITTER_TOKEN_LENGTH,
                temperature=0.8
            )
            new_status = response.choices[0].message.content
            if retries > 2:
                Exception("Failed to generated short enough status after 3 retries. Aborting.")

        return new_status

    @staticmethod
    def _action_prompt_template() -> PromptTemplate:
        f"""
        This constructs the action to be generated by the LLM. The action "prompt" is as follows:
        Action = Persona + System Prompt + Date + Location
        """

        return PromptTemplate.from_template(
            """
            {persona_template}\n\n
            Generate an interesting, engaging, and PHOTOGENIC action/activity that {avatar_name} is likely to be doing right now. Take 
            into account {avatar_name}'s personality, hobbies, and chosen career path, as well as the current date/time and location.
            Your response should be descriptive, and include location, activity, and general mood that {avatar_name} 
            is in. This will be used to generate an image will be posted on various social media channels by {avatar_name}.\n\n
            {date_and_time}
            """
        )

    @staticmethod
    def _caption_prompt_template() -> PromptTemplate:
        f"""
        This constructs the caption to be generated by the LLM. The caption "prompt" is as follows:
        Caption = Persona + Caption Template + System Prompt + Action
        """

        return PromptTemplate.from_template(
            """
            {persona_template}\n\n
            {caption_template}\n\n
            Using the provided information, generate an fun and engaging caption of '{avatar_name}' performing the
            following activity: '{action}'. This caption should be engaging and concise. It will be posted to Twitter,
            and should not exceed the 280 character limit expected of a tweet. ONLY RETURN THE CAPTION - DO NOT 
            RETURN ANYTHING ELSE.
            """
        )

    @staticmethod
    def _status_prompt_template() -> PromptTemplate:
        f"""
        This constructs a quick status update to be generated by the LLM.
        """

        return PromptTemplate.from_template(
            """
            {persona_template}\n\n
            {date_and_time}
            Using the provided information, craft an interesting and engaging twitter status update that {avatar_name}
            can post. Ensure it is engaging, slightly controversial, and maximises engagement.\n\n
            
            Hot take:
            """
        )

    @staticmethod
    def _status_retry_prompt_template() -> PromptTemplate:
        f"""
        This constructs the prompt to modify generated statuses that are longer than Twitters permitted 280 chars.
        """

        return PromptTemplate.from_template(
            """
            {persona_template}\n\n
            {avatar_name} has generated the following caption to post to their Twitter timeline. Unfortunately, this
            caption is over the permitted 280 character limit on Twitter: \n\n
            {caption} \n\n
            Using your judgement, regenerate the caption to something more succinct. If the caption 
            does not make sense with less characters, or loses its essence, generate an entirely new caption that is
            similar, and also witty, exciting, and slightly controversial.
            
            New hot take:
            """
        )

