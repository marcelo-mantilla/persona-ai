from langchain.agents import AgentExecutor, AgentType, initialize_agent
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate

from src.services.date_service import DateService
from src.services.service import Service
from src.avatar.models import Avatar

# based on date, location, avatar persona

class ActionService(Service):
    def __init__(self, avatar: Avatar):
        self.avatar = avatar
        self.date_as_prompt = DateService().date_as_prompt()

    def brainstorm_action(self) -> str:
        prompt_template = self._action_prompt_template()
        prompt = prompt_template.format(
            avatar_name=self.avatar.name,
            persona_template=self.avatar.persona_template,
            date_and_time=self.date_as_prompt,
        )
        llm = OpenAI(model="gpt-3.5-turbo", temperature=1.8, max_tokens=250)
        agent_executor = initialize_agent(
            [],
            llm,
            agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True
        )
        result = agent_executor.invoke({"input": prompt})

        print("result: ", result)

        return result["output"]

    def brainstorm_caption(self, action: str) -> str:
        prompt_template = self._caption_prompt_template()
        prompt = prompt_template.format(
            avatar_name=self.avatar.name,
            action=action,
            persona_template=self.avatar.persona_template,
            caption_template=self.avatar.caption_template,
        )
        llm = OpenAI(model="gpt-3.5-turbo", temperature=1.8, max_tokens=250)
        agent_executor = initialize_agent(
            [],
            llm,
            agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True
        )
        result = agent_executor.invoke({"input": prompt})

        print("result: ", result)

        return result["output"]

    @staticmethod
    def _action_prompt_template() -> PromptTemplate:
        f"""
            This constructs the action to be generated by the LLM. The action "prompt" is as follows:
            Action = Persona + System Prompt + Date + Location
        """

        return PromptTemplate.from_template(
            """
            {persona_template}\n\n
            Generate an interesting, engaging, and PHOTOGENIC action/activity that {avatar_name} is likely to be doing right now. Take 
            into account {avatar_name}'s personality, hobbies, and chosen career path, as well as the current date/time and location.
            Your response should be descriptive, and include location, activity, and general mood that {avatar_name} 
            is in. This will be used to generate an image will be posted on various social media channels by {avatar_name}.\n\n
            {date_and_time}
            """
        )

    @staticmethod
    def _caption_prompt_template() -> PromptTemplate:
        f"""
            This constructs the caption to be generated by the LLM. The caption "prompt" is as follows:
            Caption = Persona + Caption Template + System Prompt + Action
        """

        return PromptTemplate.from_template(
            """
            {persona_template}\n\n
            {caption_template}\n\n
            Using the provided information, generate an fun and engaging caption of '{avatar_name}' performing the
            following activity: '{action}'. This caption should be engaging, and will be posted on various social media
            channels.
            """
        )
